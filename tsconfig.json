{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Type Checking */
    // "allowUnreachableCode": true,                         /* Disable error reporting for unreachable code. */
    // "allowUnusedLabels": true,                            /* Disable error reporting for unused labels. */
    // "alwaysStrict": true,                                 /* Ensure 'use strict' is always emitted. */
    // "exactOptionalPropertyTypes": true,                   /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noFallthroughCasesInSwitch": true,                   /* Enable error reporting for fallthrough cases in switch statements. */
    // "noImplicitAny": true,                                /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    // "noImplicitOverride": true,                           /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noImplicitReturns": true,                            /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noImplicitThis": true,                               /* Enable error reporting when `this` is given the type `any`. */
    // "noPropertyAccessFromIndexSignature": true,           /* Enforces using indexed accessors for keys declared using an indexed type */
    // "noUncheckedIndexedAccess": true,                     /* Include 'undefined' in index signature results */
    // "noUnusedLocals": true,                               /* Enable error reporting when a local variables aren't read. */
    // "noUnusedParameters": true,                           /* Raise an error when a function parameter isn't read */
    "strict": true,                                          /* Enable all strict type-checking options. */
    // "strictBindCallApply": true,                          /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // "strictFunctionTypes": true,                          /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictNullChecks": true,                             /* When type checking, take into account `null` and `undefined`. */
    // "strictPropertyInitialization": true,                 /* Check for class properties that are declared but not set in the constructor. */
    // "useUnknownInCatchVariables": true,                   /* Type catch clause variables as 'unknown' instead of 'any'. */

    /* Modules */
    // "allowUmdGlobalAccess": true,                         /* Allow accessing UMD globals from modules. */
    "baseUrl": "./src",                                      /* Specify the base directory to resolve non-relative module names. */
    "module": "ESNext",                                      /* Specify what module code is generated. */
    "moduleResolution": "Node",                              /* Specify how TypeScript looks up a file from a given module specifier. */
    // "noResolve": true,                                    /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */
    "paths": {},                                             /* Specify a set of entries that re-map imports to additional lookup locations. */
    "resolveJsonModule": true,                               /* Enable importing .json files */
    // "rootDir": "./",                                      /* Specify the root folder within your source files. */
    // "rootDirs": [],                                       /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                      /* Specify multiple folders that act like `./node_modules/@types`. */
    // "types": [],                                          /* Specify type package names to be included without being referenced in a source file. */

    /* Emit */
    // "declaration": true,                                  /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                               /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                          /* Only output d.ts files and not JavaScript files. */
    // "outDir": "./",                                       /* Specify an output folder for all emitted files. */
    // "outFile": "./",                                      /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */
    // "removeComments": true,                               /* Disable emitting comments. */
    // "sourceMap": true,                                    /* Create source map files for emitted JavaScript files. */
    // "declarationDir": "./",                               /* Specify the output directory for generated declaration files. */
    // "downlevelIteration": true,                           /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "emitBOM": true,                                      /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "importHelpers": true,                                /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "error",                    /* Specify emit/checking behavior for imports that are only used for types */
    // "inlineSourceMap": true,                              /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                                /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "mapRoot": "",                                        /* Specify the location where debugger should locate map files instead of generated locations. */
    // "newLine": "crlf",                                    /* Set the newline character for emitting files. */
    "noEmit": true,                                          /* Disable emitting files from a compilation. */
    // "noEmitHelpers": true,                                /* Disable generating custom helper functions like `__extends` in compiled output. */
    // "noEmitOnError": true,                                /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                           /* Disable erasing `const enum` declarations in generated code. */
    // "preserveValueImports": true,                         /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
    // "sourceRoot": "",                                     /* Specify the root path for debuggers to find the reference source code. */
    // "stripInternal": true,                                /* Disable emitting declarations that have `@internal` in their JSDoc comments. */

    /* JavaScript Support */
    "allowJs": true,                                         /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    // "checkJs": true,                                      /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                            /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

    /* Editor Support */
    // "disableSizeLimit": true,                             /* To avoid a possible memory bloat issues when working with very large JavaScript projects, there is an upper limit to the amount of memory TypeScript will allocate. Turning this flag on will remove the limit. */
    // "plugins": [],                                        /* List of language service plugins to run inside the editor. */

    /* Interop Constraints */
    // "allowSyntheticDefaultImports": true,                 /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                                 /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    "forceConsistentCasingInFileNames": true,                /* Ensure that casing is correct in imports. */    /* Type Checking */
    "isolatedModules": true,                                 /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "preserveSymlinks": true,                             /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */

    /* Backwards Compatibility */
    // "noImplicitUseStrict": true,                          /* You shouldnâ€™t need this. By default, when emitting a module file to a non-ES6 target, TypeScript emits a "use strict"; prologue at the top of the file. This setting disables the prologue. */
    // "noStrictGenericChecks": true,                        /* TypeScript will unify type parameters when comparing two generic functions. */
    // "suppressExcessPropertyErrors": true,                 /* Suppress reporting of excess property errors. */
    // "suppressImplicitAnyIndexErrors": true,               /* Suppress reporting of indexing errors when using `any` type. */

    /* Language and Environment */
    // "emitDecoratorMetadata": true,                        /* Emit design-type metadata for decorated declarations in source files. */
    // "experimentalDecorators": true,                       /* Enable experimental support for TC39 stage 2 draft decorators. */
    "jsx": "react-jsx",                                      /* Specify what JSX code is generated. */
    // "jsxFactory": "",                                     /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                             /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                                /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    "lib": ["ESNext", "DOM", "DOM.Iterable"],                /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "noLib": true,                                        /* Disable including any library files, including the default lib.d.ts. */
    // "reactNamespace": "",                                 /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    "target": "ESNext",                                      /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "useDefineForClassFields": true,                      /* Emit ECMAScript-standard-compliant class fields. */

    /* Compiler Diagnostics */
    // "explainFiles": true,                                 /* Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation. */
    // "extendedDiagnostics": true,                          /* You can use this flag to discover where TypeScript is spending its time when compiling. This is a tool used for understanding the performance characteristics of your codebase overall. */
    // "generateCpuProfile": true,                           /* This option gives you the chance to have TypeScript emit a v8 CPU profile during the compiler run. The CPU profile can provide insight into why your builds may be slow. */
    // "listEmittedFiles": true,                             /* Print names of generated files part of the compilation to the terminal. */
    // "listFiles": true,                                    /* Print names of files part of the compilation. This is useful when you are not sure that TypeScript has included a file you expected. */
    // "traceResolution": true,                              /* When you are trying to debug why a module isnâ€™t being included. You can set traceResolutions to true to have TypeScript print information about its resolution process for each processed file. */

    /* Projects */
    // "composite": true,                                    /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "disableReferencedProjectLoad": true,                 /* Reduce the number of projects loaded automatically by TypeScript. */
    // "disableSolutionSearching": true,                     /* Opt a project out of multi-project reference checking when editing. */
    // "disableSourceOfProjectReferenceRedirect": true,      /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "incremental": true,                                  /* Enable incremental compilation */
    // "tsBuildInfoFile": "./",                              /* Specify the folder for .tsbuildinfo incremental compilation files. */

    /* Output Formatting */
    // "noErrorTruncation": true,                            /* Do not truncate error messages. */
    // "preserveWatchOutput": true,                          /* Whether to keep outdated console output in watch mode instead of clearing the screen every time a change happened. */
    // "pretty": true,                                       /* Stylize errors and messages using color and context, this is on by default â€” offers you a chance to have less terse, single colored messages from the compiler. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                          /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                     /* Skip type checking all .d.ts files. */

    /* Watch Options */
    // "assumeChangesOnlyAffectDirectDependencies": true,    /* When this option is enabled, TypeScript will avoid rechecking/rebuilding all truly possibly-affected files, and only recheck/rebuild files that have changed as well as files that directly import them. */
  },
  "include": [
    "next-env.d.ts",
    "**    /*.ts",
    "**    /*.tsx"
  ],
  "exclude": [
    "node_modules/",
    "**    /*.module.scss",
    "**    /*.stories.tsx",
    "**    /*.test.ts"
  ]
}
