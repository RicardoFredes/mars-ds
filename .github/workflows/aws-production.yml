name: Deploy ECS â€¢ Production

on:
  workflow_dispatch: {}
  push:
    branches: [main]

env:
  ENVIRONMENT: production
  AWS_SECRET_KEY_ID:     ${{ secrets.AWS_PRODUCTION_GITHUB_ACTIONS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PRODUCTION_GITHUB_ACTIONS_SECRET }}
  AWS_CLUSTER_ECS:       "MS-ECS-FAR"
  AWS_SERVICE_ECS:       "MS-ECS-SER-mars"
  AWS_TASKDEF_ECS:       "./bin/ecs-task-definition.json"
  AWS_TASKDEF_ECS_ENV:   "/bin/.env.deploy"
  AWS_REGION:            "us-east-1"
  
jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Get runtime build variables
        id: app
        run: |
          echo "NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')" >> $GITHUB_OUTPUT 
          
      - name: Get runtime build variables
        id: localvars
        run: |
          echo "PULL_NUMBER=$(echo $GITHUB_REF | awk -F / '{print $3}')" >> $GITHUB_OUTPUT 
          echo "IMAGE_TAG=${{ steps.app.outputs.NAME }}-${{ github.run_number }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT 

      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_SECRET_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
#      - name: Inject Secrets Amazon ECS task definition
#        id: inject-secret-web-container
#        uses: vebr/inject-aws-ssm-to-task-definition@v1
#        with:
#          task-definition: ${{ env.AWS_TASKDEF_ECS }}
#          container-name: ${{ steps.app.outputs.NAME }}
#          secretsWildcard: ${{ env.AWS_TASKDEF_ECS_ENV }}
#          aws_region: ${{ env.AWS_REGION }}          

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ steps.app.outputs.NAME }}
          IMAGE_TAG: ${{ steps.localvars.outputs.IMAGE_TAG }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}/${{ steps.app.outputs.NAME }}
        run: |
          cat ${{ steps.inject-secret-web-container.outputs.task-definition }}
          sleep 5
          cat ${{ env.AWS_TASKDEF_ECS }}
          sleep 5          
          docker build -t $ECR_REGISTRY:$IMAGE_TAG -t $ECR_REGISTRY:latest .
          docker push $ECR_REGISTRY:latest
          docker push $ECR_REGISTRY:$IMAGE_TAG

      - name: Get .env, options and .npmrc
        env:
          IMAGE_TAG: ${{ steps.localvars.outputs.IMAGE_TAG }}
        run: echo "MONITORING_NAME=${{ steps.app.outputs.NAME }}/${{ env.ENVIRONMENT }}/aws" >> .env.deploy

      - name: Push image to Amazon ECR
        id: push-image
        env:
          IMAGE_TAG: ${{ steps.localvars.outputs.IMAGE_TAG }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}/${{ steps.app.outputs.NAME }}
        run: |
          docker push $ECR_REGISTRY:latest
          docker push $ECR_REGISTRY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: ecs-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.AWS_TASKDEF_ECS }}
          container-name: ${{ steps.app.outputs.NAME }}
          image: ${{ steps.push-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.AWS_TASKDEF_ECS }}
          service: ${{ env.AWS_SERVICE_ECS }}
          cluster: ${{ env.AWS_CLUSTER_ECS }}
          wait-for-service-stability: true
