name: Deploy Elastic Beanstalk â€¢ Sandbox 

on:
  workflow_dispatch: {}
  push:
    branches: [develop]

env:
  ENVIRONMENT: sandbox
  AWS_SECRET_KEY_ID: ${{ secrets.AWS_SANDBOX_GITHUB_ACTIONS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SANDBOX_GITHUB_ACTIONS_SECRET }}
  AWS_CLUSTER_ECS: "MS-ECS-FAR"
  AWS_SERVICE_ECS: "MS-ECS-SER"

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Get runtime build variables
        id: app
        run: |
          echo "::set-output name=NAME::$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')"

      - name: Get runtime build variables
        id: localvars
        run: |
          echo "::set-output name=PULL_NUMBER::$(echo $GITHUB_REF | awk -F / '{print $3}')"
          echo "::set-output name=IMAGE_TAG::${{ steps.app.outputs.NAME }}-${{ github.run_number }}-${{ github.run_attempt }}"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_SECRET_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          echo "::set-output name=registry::$(aws sts get-caller-identity --query "Account" | tr -d '"').dkr.ecr.us-east-1.amazonaws.com"
          aws ecr get-login-password | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query "Account" | tr -d '"').dkr.ecr.us-east-1.amazonaws.com

      - name: Get .env, options and .npmrc
        env:
          AWS_REGION: us-east-1
          IMAGE_TAG: ${{ steps.localvars.outputs.IMAGE_TAG }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}/${{ steps.app.outputs.NAME }}
        run: echo "MONITORING_NAME=${{ steps.app.outputs.NAME }}/${{ env.ENVIRONMENT }}/aws" >> .env.deploy

      - name: Docker Build
        id: build-image
        env:
          IMAGE_TAG: ${{ steps.localvars.outputs.IMAGE_TAG }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}/${{ steps.app.outputs.NAME }}
        run: |
          docker build -t $ECR_REGISTRY:$IMAGE_TAG -t $ECR_REGISTRY:latest .

      - name: Push image to Amazon ECR
        id: push-image
        env:
          IMAGE_TAG: ${{ steps.localvars.outputs.IMAGE_TAG }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}/${{ steps.app.outputs.NAME }}
        run: |
          docker push $ECR_REGISTRY:latest
          docker push $ECR_REGISTRY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY:$IMAGE_TAG"

      - name: Update Service ECS
        id: update-service-ecs
        env:
          IMAGE_TAG: ${{ steps.localvars.outputs.IMAGE_TAG }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}/${{ steps.app.outputs.NAME }}
        run: aws ecs update-service --cluster ${{ env.AWS_CLUSTER_ECS }} --service ${{ env.AWS_SERVICE_ECS }} --force-new-deployment
